[ { "title": "Git Best Practice", "url": "/posts/git-best-practices/", "categories": "DevOps, Git", "tags": "git, utilities, devops, versioning", "date": "2021-12-22 04:30:00 -0600", "snippet": "These are just a collection of things I find interesting for myself and may not be for everyone.Keep your commits small and cleanWhen working with changes to fix bugs, it’s easy to get sidetracked and work on multiple bugs as you see them. It’s fine to work on multiple things at the same time in a repository but you want to keep each commit small and focused. You can later squash your commits to just do one big commit to master (see below).Atomic commit = one commit for one change.Making smaller more focused commits allows for easier roll-backs of a small commit rather than one huge commit that undos all the work you did when it was only one minor thing that needed to change. This practice also makes it easier for the next person to read and follow the changes that were made to the repository.Squash commits before mergingWhile working on your feature branch you should commit changes often but the commit to master should only be one or as few commits as you can make. Squashing commits does not overwrite your existing commits but rather packages them into the one commit you will push to master and allows you to provide a more elaborate message explaining all the changes being made.git rebase -i origin/mainThis will pop-up a list of commits to choose from in your editor like so:pick 0000000 one commit messagepick 0000000 another commit messagepick 0000000 yet another commit message# Rebase 0000000..0000000 onto 0000000 (3 commands)## Commands:# p, pick &amp;lt;commit&amp;gt; = use commit# r, reword &amp;lt;commit&amp;gt; = use commit, but edit the commit message# e, edit &amp;lt;commit&amp;gt; = use commit, but stop for amending# s, squash &amp;lt;commit&amp;gt; = use commit, but meld into previous commit# f, fixup &amp;lt;commit&amp;gt; = like &quot;squash&quot;, but discard this commit&#39;s log message# x, exec &amp;lt;command&amp;gt; = run command (the rest of the line) using shell# b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)# d, drop &amp;lt;commit&amp;gt; = remove commit# l, label &amp;lt;label&amp;gt; = label current HEAD with a name# t, reset &amp;lt;label&amp;gt; = reset HEAD to a label# m, merge [-C &amp;lt;commit&amp;gt; | -c &amp;lt;commit&amp;gt;] &amp;lt;label&amp;gt; [# &amp;lt;oneline&amp;gt;]# . create a merge commit using the original merge commit&#39;s# . message (or the oneline, if no original merge commit was# . specified). Use -c &amp;lt;commit&amp;gt; to reword the commit message.## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.Change pick for the commits you want to squash to spick 0000000 one commit messages 0000000 another commit messages 0000000 yet another commit messageSave and quit. You will now get a second popup to create the squash commit# This is a combination of 3 commits.# This is the 1st commit message:one commit message# This is the commit message #2:another commit message# This is the commit message #3:yet another commit message[...]Remove the extra commits that you are squashing leaving just the one you want to keep# This is a combination of 3 commits.# This is the 1st commit message:one commit message[...]Save and quit again then run the following to complete the squash taskgit push --forceWrite meaningful commit messagesThis is something many take for granted and rarely do right. When I started learning git I was shown the easy way to write a commit message git commit -am &quot;fixed two build-breaking issues&quot;. I have since learned that you should make your commit messages meaningful so that it’s easier to read the changes in the change history instead of having to open each change to read the description if one was added. I now run git add independently, then git commit which opens my editor where I can add a title and a more detailed description.Good meaningful messages are written in present tense. I write my commits by keeping this in my head This commit will and continue my title from there, like Unpin the dd-trace gem version. Write your commit message in the imperative: “Fix”, “Add”, “Change” instead of “Fixed”, “Added”, “Changed” for example. Don’t end the summary line with a period - it’s a title and titles don’t end with a period.Per Git: As a general rule, your messages should start with a single line that’s no more than about 50 characters and that describes the changeset concisely, followed by a blank line, followed by a more detailed explanation.Here is a template you can followCapitalized, short (50 chars or less) summaryMore detailed explanatory text, if necessary. Wrap it to about 72characters or so. In some contexts, the first line is treated as thesubject of an email and the rest of the text as the body. The blankline separating the summary from the body is critical (unless you omitthe body entirely); tools like rebase will confuse you if you run thetwo together.Write your commit message in the imperative: &quot;Fix bug&quot; and not &quot;Fixed bug&quot;or &quot;Fixes bug.&quot; This convention matches up with commit messages generatedby commands like git merge and git revert.Further paragraphs come after blank lines.- Bullet points are okay, too- Typically a hyphen or asterisk is used for the bullet, followed by a single space, with blank lines in between, but conventions vary here- Use a hanging indentResolves: #123Others write commit messages like this:&amp;lt;type&amp;gt;: &amp;lt;description&amp;gt;[optional body][optional footer]or for issue tracking:&amp;lt;issue ID&amp;gt; - &amp;lt;type&amp;gt; &amp;lt;description&amp;gt;&amp;lt;body&amp;gt;with type being one of the following: feat: feature fix: a bug fix docs: a change to documentation style: a change to style, formatting, typing perf: a change that improves performance test: a change that adds testing chore: a change in the build processBranchesOne of the best advantages of using Git is its branching feature, use it. I’ve been guilty of cutting corners in this regard. Best practice is to never commit directly to master. Create a new branch for each new feature git branch -b &amp;lt;branch_name&amp;gt; Use meaningful names for your branches Checkout your new branch: git checkout &amp;lt;branch_name&amp;gt; Keep your branches up to date Delete stale branches git branch -d branchNameKnow your optionsThere are many options you can use when working in Git, it may be hard to remember them all and that’s ok. git help -a is your friend.Additional Reading Commit Often, Perfect Later, Publish Once Semantic Commit Messages A successful Git branching model Version Control Best Practices Atomic commits Single-responsibility principle" }, { "title": "gitignore", "url": "/posts/gitignore/", "categories": "DevOps, Git", "tags": "git, utilities, devops, versioning", "date": "2021-12-22 04:25:00 -0600", "snippet": "IntroductionThe .gitignore file is a simple text file that tells Git which files and folders in a repo it should ignore. These files can be stored at the repo level or at the global level. To get a good setup for your needs, you can use gitignore.io to create your file with the entries you need.WARNING: Files already being tracked by Git are not affected by adding this file.To use a global .gitignore file, create the file in your home directory:touch ~/.gitignore_globalOnce you have the file created, run the following command to add it to your git configuration:git config --global core.excludesfile ~/.gitignore_globalStructureIgnores in your .gitignore are made one entry per line. Lines that start with # are comments. Escape key \\ are used when patterns start with #. The slash / is used as the directory separator. An asterisk * matches anything except a slash. The character ? matches any one character except /. The range notation, e.g. [a-zA-Z], can be used to match one of the characters in a range. A leading **/ followed by a slash means match in all directories. A trailing /** matches everything inside. A slash followed by two consecutive asterisks then a slash eg. a/**/b matches zero or more directories.Example .gitignore fileThis is a basic .gitignore file. There are numerous things you can add depending on the OS you use down to the language you develop on that will determine the entries in your .gitignore file. You may even choose to have a setup where you have multiple name.gitignore type structure which I will not cover.# Created by https://www.toptal.com/developers/gitignore/api/ruby,jekyll,macos# Edit at https://www.toptal.com/developers/gitignore?templates=ruby,jekyll,macos# MkDocs documentationsite/# Packages*.7z*.dmg*.gz*.iso*.jar*.rar*.tar*.zip### macOS #### General.DS_Store.AppleDouble.LSOverride# Icon must end with two \\rIcon# Thumbnails._*# Files that might appear in the root of a volume.DocumentRevisions-V100.fseventsd.Spotlight-V100.TemporaryItems.Trashes.VolumeIcon.icns.com.apple.timemachine.donotpresent# Directories potentially created on remote AFP share.AppleDB.AppleDesktopNetwork Trash FolderTemporary Items.apdisk### Jekyll ###_site/.sass-cache/.jekyll-cache/.jekyll-metadata### Ruby ###*.gem*.rbc/.config/coverage//InstalledFiles/pkg//spec/reports//spec/examples.txt/test/tmp//test/version_tmp//tmp/# Used by dotenv library to load environment variables.# .env# Ignore Byebug command history file..byebug_history## Specific to RubyMotion:.dat*.repl_historybuild/*.bridgesupportbuild-iPhoneOS/build-iPhoneSimulator/## Specific to RubyMotion (use of CocoaPods):## We recommend against adding the Pods directory to your .gitignore. However# you should judge for yourself, the pros and cons are mentioned at:# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control# vendor/Pods/## Documentation cache and generated files:/.yardoc//_yardoc//doc//rdoc/## Environment normalization:/.bundle//vendor/bundle/lib/bundler/man/# for a library or gem, you might want to ignore these files since the code is# intended to run in multiple environments; otherwise, check them in:# Gemfile.lock# .ruby-version# .ruby-gemset# unless supporting rvm &amp;lt; 1.11.0 or doing something fancy, ignore this:.rvmrc# Used by RuboCop. Remote config files pulled in from inherit_from directive.# .rubocop-https?--*# End of https://www.toptal.com/developers/gitignore/api/ruby,jekyll,macos" }, { "title": "Using Git on macOS", "url": "/posts/using-git/", "categories": "DevOps, Git", "tags": "git, utilities, devops, versioning", "date": "2021-12-22 03:58:00 -0600", "snippet": "Git on macOSBefore proceeding, ensure that you have your SSH properly setup and configured. Using SSH Keys tutorial coming soon.XcodeInstall Xcode by running this command in your terminalxcode-select --installUsing HomebrewYou should already have Homebrew installed. Using Homebrew tutorial coming soonRun the following command to install Gitbrew install gitThe manual way Download the most recent release from here Install GitHub Desktop and launch it Click GitHub Desktop in the top left corner of your screen then select Install Command Line Tool, this will allow you to use GitHub from command line instead of a GUI.VerificationVerify you can connect to GitHub using your SSH Key.ssh -vT git@github.comIf you are connecting for the first time, you will get this message, type yes then hit enter to proceed.# The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.# RSA key fingerprint is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx.# Are you sure you want to continue connecting (yes/no)?You may see other things but you should get a line that says something like this:Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.Don’t worry about the shell access thing, you don’t want that anyway.Configuring your Git ProfileConfigure user information for all local repositoriesgit config --global user.name &quot;Full Name&quot;git config --global user.email &quot;username@domain.com&quot;git config --global core.editor vimgit config --global color.ui auto Remember to switch vim above to your editor of choice.Using GitThanks to Pranav Moktali. clone repo so that origin is definedgit clone git@github.com:org/repo_name.git move to portfolio cd repo_name add your fork git remote add username git@github.com:username/forked_repo.git print remote to verify it’s setup correctly git remote -v You should see something like this (the order may be different for you) origin git@guthub.com:org/repo_name.git (fetch)origin git@guthub.com:org/repo_name.git (push)fork git@guthub.com:username/forked_repo.git (fetch)fork git@guthub.com:username/forked_repo.git (push) New Branch/PR: git checkout -b my_new_branch rebase with origin/main if outdated git rebase origin/main make changes and push branch git push &amp;lt;fork&amp;gt; my_new_branch Older good ways to do the same as aboveUpdate Git Repo Fork with MasterThis is done from a terminal.Browse to the cloned repository you want to update and proceed with the following: Verify git remote -v Specify a remote upstream repo to sync with your fork: git remote add upstream &amp;lt;repo_url&amp;gt; Verify: git remote -v Update Git Repo Fork with Origin Master Fetch branches and commits from the upstream repo. You’ll be storing the commits to master in a local branch upstream/master: git fetch upstream Checkout your fork’s local master, then merge changes from upstream/master into it. git checkout mastergit merge upstream/master Push your updates up to your fork git push origin master Rebase a Pull Request with MasterWarning: Not sure about the following entirely, it was sent to me from a co-worker but I’ve not used it yet. Fetch branches and commits from the upstream repo. You’ll be storing the commits to master in a local branch upstream/master: git fetch upstream Checkout your fork’s local master, then git checkout master merge changes from upstream/master into it. git remote update --prune Push your updates up to your fork git fetch upstream Merge upstream master git merge upstream/master Checkout the branch you were working on git checkout branchName Updating a feature branchImportant: Do this after you have updated your Git Fork with the Origin Master. (see instructions above) Check out the branch you want to merge into git checkout &amp;lt;feature-branch&amp;gt; Merge your (now updated) master branch into your feature branch git merge master Depending on your git configuration this may open vim. Enter a commit message, save, and quit vim: Press a to enter insert mode and append text following the current cursor position. Press the esc key to enter command mode. Type :wq to write the file to disk and quit. This only updates your local feature branch. To update it on GitHub, push your changes. git push origin &amp;lt;feature-branch&amp;gt; CheatsheetThis is not an exhaustive list of what Git can do, but rather the more common things you may come across in your daily use.Create RepositoriesStart a new repository or obtain one from an existing URL Create a new local repository with the specified name git init [project-name] Download a project and its entire version history git clone [url] Making changesReview edits and craft a commit transaction List all new or modified files to be committed git status Show file differences not yet staged git diff Snapshot a file in preparation for versioning git add [file] Show file differences between staging and the last file version git diff --staged Unstage a file, but preserve its contents git reset [file] Record file snapshots permanently in version history git commit -m &quot;[descriptive message]&quot; Group ChangesName a series of commits and combine completed efforts List all local branches in the current repository git branch Create a new branch git branch [branch-name] Switch to a specified branch and update a working directory git checkout [branch-name] Combine a specified branch’s history into the current branch git merge [branch] Delete a specified branch git branch -d [branch-name] Refactor FilenamesRelocate and remove versioned files Delete a file from the working directory and stages the deletion git rm [file] Remove a file from version control but preserves the file locally git rm --cached [file] Change a file name and prepares it for commit git mv [file-original] [file-renamed] Suppress TrackingExclude temporary files and paths A text file named .gitignore suppresses accidental versioning of files and paths matching the specified patterns, examples: *.logbuild/temp-* List all ignored files in a project git ls-files --other --ignored --exclude-standard Save FragmentsShelve and restore incomplete changes Temporarily store all modified tracked files git stash Restore the most recently stashed files git stash pop List all stashed changesets git stash list Discard the most recently stashed changeset git stash drop Review HistoryBrowse and inspect the evolution of project files List version history for the current branch git log List version history for a file, including renames git log --follow [file] Show content differences between two branches git diff [first-branch]...[second-branch] Output metadata and content changes of the specified commit git show [commit] Redo CommitsErase mistakes and craft replacement history Undo all commits after [commit], preserving changes locally git reset [commit] Discard all history and changes back to the specified commit git reset --hard [commit] Synchronize ChangesRegister a repository bookmark and exchange version history Download all history from the repository bookmark git fetch [bookmark] Combine bookmark’s branch into current local branch git merge [bookmark]/[branch] Upload all local branch commits to GitHub git push [alias] [branch] Download bookmark history and incorporates changes git pull " }, { "title": "Reset NVRAM, PRAM or SMC", "url": "/posts/mac-smc-pram/", "categories": "Hardware, macOS", "tags": "mac, laptop, build", "date": "2021-12-22 03:20:00 -0600", "snippet": "Reset NVRAM or PRAM NVRAM or NonVolatile Random-Access Memory is a small amount of memory that your Mac uses to store certain settings and access them quickly. PRAM (Parameter RAM) stores similar information, and the steps for resetting NVRAM and PRAM are the same.These settings include: sound volume display resolution startup disk selection time zone recent kernel panic information.If you experience issues related to these settings or others, resetting NVRAM and PRAM might help. To reset these hold down the following keys then power on your MacBook⌥ Option+⌘ Cmd+P+R On Mac computers that play a startup sound, you can release the keys after the second startup sound. On Mac computers that have the Apple T2 Security Chip, you can release the keys after the Apple logo appears and disappears for the second time.note When your Mac finishes starting up, you might want to open System Preferences and adjust any settings that were reset, such as sound volume, display resolution, startup disk selection, or time zone. If your Mac is using a firmware password, this key combination does nothing or will cause your Mac to start up from macOS Recovery. To reset NVRAM, first turn off the firmware password.Reset SMCThe SMC is responsible for: Responding to presses of the power button Responding to the display lid opening and closing on Mac notebooks Battery management Thermal management Sudden Motion Sensor (SMS) Ambient light sensing Keyboard backlighting Status indicator light (SIL) management Battery status indicator lights Selecting an external (instead of internal) video source for some iMac displaysThese symptoms might mean that an SMC reset is necessary: Your computer’s fans run at high speed, even though it isn’t under heavy usage and is properly ventilated. The keyboard backlight behaves incorrectly. The status indicator light, if present, behaves incorrectly. Battery indicator lights, if present, behave incorrectly on Mac notebooks with a non-removable battery. The display backlight doesn’t respond correctly to ambient light changes. Your Mac doesn’t respond when you press the power button. Your Mac notebook doesn’t respond properly when you close or open the lid. Your Mac sleeps or shuts down unexpectedly and you can’t turn it back on. The battery doesn’t charge properly. Your MacBook or MacBook Pro doesn’t charge through its built-in USB-C port. Your MacBook or MacBook Pro doesn’t recognize external devices that are connected to its built-in USB-C port. The MagSafe power adapter LED, if present, doesn’t indicate the correct charging activity. Your Mac performs unusually slowly, even though its CPU isn’t under an abnormally heavy load. A Mac that supports target display mode doesn’t switch into or out of target display mode as expected, or it switches into or out of target display mode at unexpected times. The illumination around the I/O ports on a Mac Pro (Late 2013) doesn’t turn on when you move the computer.Before resetting your SMC Restart your Mac: Apple () menu &amp;gt; Restart Apple () menu &amp;gt; Shut Down, then press the power button again to turn it on For battery issues: Unplug the power adapter from your Mac and the electrical outlet for several seconds, then plug it back in. Choose Apple () menu &amp;gt; Shut Down and wait for your Mac to shut down. Press the power button again to turn on your Mac. Reset the SMC on computers that have the T2 chip Choose Apple () menu &amp;gt; Shut Down and wait for your Mac to shut down. Press and hold the power button for 10 seconds. Release the power button, then wait a few seconds. Press the power button again to turn on your Mac.If that doesn’t resolve the issue, follow these steps: Choose Apple () menu &amp;gt; Shut Down and wait for your Mac to shut down. Press and hold the right ⇧ Shift key, the left ⌥ Option key, and the left ⌃ Ctrl key for 7 seconds. Your Mac might turn on and show the Apple () logo on its display. Keep holding those keys while you also press and hold the power button for another 7 seconds. If your Mac turned on when you first pressed the keys, it turns off at this point. Release all three keys and the power button, then wait a few seconds. Press the power button again to turn on your Mac.Reset the SMC on other computersI won’t cover the older models with removable batteries. Choose Apple () menu &amp;gt; Shut Down and wait for your Mac to shut down. Press ⇧ Shift+⌃ Ctrl+⌥ Option on the left side of the built-in keyboard, then press the power button at the same time. Hold these keys and the power button for 10 seconds. If you have a MacBook Pro with Touch ID, the Touch ID button is also the power button. Release all keys. Press the power button again to turn on your Mac.Hidden FilesIn FinderTo show hidden files, enter the following key sequence from with finder open:⌘ Cmd+⇧ Shift+.Repeat the sequence to hide them again.In Terminal Run the following command:defaults write com.apple.Finder AppleShowAllFiles true ; killall Finder To undo, run the following command:defaults write com.apple.Finder AppleShowAllFiles false ; killall FinderReference Reset NVRAM or PRAM Resetting the System Management Controller (SMC)" }, { "title": "Cron", "url": "/posts/cron/", "categories": "Administration, Utilities", "tags": "utilities, linux, servers, administration", "date": "2021-12-22 03:10:00 -0600", "snippet": "Cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals.Cron is driven by a crontab (cron table) file, a configuration file that specifies shell commands to run periodically on a given schedule. The crontab files are stored where the lists of jobs and other instructions to the cron daemon are kept. Users can have their own individual crontab files and often there is a system-wide crontab file (usually in /etc or a subdirectory of /etc) that only system administrators can edit.crontabA crontab file contains instructions to the cron(8) daemon of the general form: “run this command at this time on this date”. Each user has their own crontab, and commands in any given crontab will be executed as the user who owns the crontab.Crontab LayoutEach line of a crontab file represents a job, and looks like this:+-------------- minute (0-59)| +------------ hour (0-23)| | +---------- day of the month (1-31)| | | +-------- month (1-12)| | | | +------ day of the week (0-6) (Sunday to Saturday)| | | | || | | | || | | | |* * * * * command to executeExpressions Field Required Allowed values Allowed special characters Minutes Yes 0–59 * , , , - Hours Yes 0–23 * , , , - Day of month Yes 0-31 * , , , - Month Yes 0-12 or JAN–DEC * , , , - Day of week Yes 0–6 or SUN–SAT * , , , - Year No 1970–2099 * , , , - Asterisk (*) asterisk specifies all possible values for a field.Comma (,) Commas define lists. Example: &quot;MON,WED,FRI&quot; in the 5th field (day of week) means Mondays, Wednesdays and Fridays. Hyphen (-) Hyphens define ranges. Example: 2019–2022 indicates every year between 2019 and 2022, inclusive. Pound (#) Pounds define comments. Example: # This command will initiate a script that does something. Step Values Step values can be used in conjunction with ranges. Following a range with /&amp;lt;number&amp;gt; specifies skips of the number’s value through the range. Example: 0-23/2 indicates every other hour, so 0,2,4,6,8,10,12,14,16,18,20,22 Example Cron File# run five minutes after midnight, every day5 0 * * * $HOME/bin/daily.job &amp;gt;&amp;gt; $HOME/tmp/out 2&amp;gt;&amp;amp;1# run at 2:15pm on the first of every month -- output mailed to user15 14 1 * * $HOME/bin/monthly# run at 10 pm on weekdays, annoy Joe0 22 * * 1-5 mail -s &quot;It&#39;s 10pm&quot; joe%Joe,%%Where are your kids?%23 0-23/2 * * * echo &quot;run 23 minutes after midn, 2am, 4am ..., everyday&quot;5 4 * * sun echo &quot;run at 5 after 4 every sunday&quot;# run this as root* * * * * root touch /tmp/fileGeneral OverviewList the jobs for the current usercrontab -lEdit your crontabcrontab -eIf this is the first time you are running cron, you will get a prompt to choose your default editor, this list will vary depending on which editors your have installedno crontab for user - using an empty oneSelect an editor. To change later, run &#39;select-editor&#39;. 1. /bin/nano &amp;lt;---- easiest 2. /usr/bin/vim.basic 3. /usr/bin/vim.tiny 4. /bin/edChoose 1-4 [1]:Edit someone else’s cron jobscrontab -u username -eRemove all cron jobs for the current usercrontab -rExample crontab useThese are just some examples to get you started.!!! Important “Keep in mind” There is a difference between running a command every x [window] vs running things every xth [window].* Example: Every 15 minutes vs every 15&amp;lt;sup&amp;gt;th&amp;lt;/sup&amp;gt; minute.At minute 1515 * * * *Would produce:next at 2019-12-04 15:15:00then at 2019-12-04 16:15:00then at 2019-12-04 17:15:00then at 2019-12-04 18:15:00then at 2019-12-04 19:15:00At every 15th minute*/15 * * * *Would produce:next at 2019-12-04 14:30:00then at 2019-12-04 14:45:00then at 2019-12-04 15:00:00then at 2019-12-04 15:15:00then at 2019-12-04 15:30:00At every minute* * * * * &amp;lt;command-to-execute&amp;gt;Would produce:next at 2019-12-04 14:42:00then at 2019-12-04 14:43:00then at 2019-12-04 14:44:00then at 2019-12-04 14:45:00then at 2019-12-04 14:46:00At every 5th minute*/5 * * * * &amp;lt;command-to-execute&amp;gt;Would produce:next at 2019-12-04 14:10:00then at 2019-12-04 14:15:00then at 2019-12-04 14:20:00then at 2019-12-04 14:25:00then at 2019-12-04 14:30:00At minute 0, 5, and 100,5,10 * * * * &amp;lt;command-to-execute&amp;gt;Would produce:next at 2019-12-04 15:00:00then at 2019-12-04 15:05:00then at 2019-12-04 15:10:00then at 2019-12-04 16:00:00then at 2019-12-04 16:05:00At minute 00 * * * * &amp;lt;command-to-execute&amp;gt;Would produce:next at 2019-12-04 15:00:00then at 2019-12-04 16:00:00then at 2019-12-04 17:00:00then at 2019-12-04 18:00:00then at 2019-12-04 19:00:00At minute 0 past every 2nd hour0 */2 * * * &amp;lt;command-to-execute&amp;gt;Would produce:next at 2019-12-04 16:00:00then at 2019-12-04 18:00:00then at 2019-12-04 20:00:00then at 2019-12-04 22:00:00then at 2019-12-05 00:00:00At minute 23 past every 2nd hour from 0 through 2023 0-20/2 * * * &amp;lt;command-to-execute&amp;gt;Would produce:next at 2020-01-01 00:00:00then at 2020-04-01 00:00:00then at 2020-07-01 00:00:00then at 2020-10-01 00:00:00then at 2021-01-01 00:00:00At 00:00 on day-of-month 4 in January, April, July, and October0 0 4 1,4,7,10 *Would produce:next at 2020-01-04 00:00:00then at 2020-04-04 00:00:00then at 2020-07-04 00:00:00then at 2020-10-04 00:00:00then at 2021-01-04 00:00:00At 04:05 on Sunday5 4 * * sunWould produce:next at 2019-12-08 04:05:00then at 2019-12-15 04:05:00then at 2019-12-22 04:05:00then at 2019-12-29 04:05:00then at 2020-01-05 04:05:00At 22:00 on every day-of-week from Monday through Friday0 22 * * 1-5Would produce:next at 2019-12-04 22:00:00then at 2019-12-05 22:00:00then at 2019-12-06 22:00:00then at 2019-12-09 22:00:00then at 2019-12-10 22:00:00At minute 23 past every 2nd hour from 0 through 2023 0-20/2 * * *Would produce:next at 2019-12-04 16:23:00then at 2019-12-04 18:23:00then at 2019-12-04 20:23:00then at 2019-12-05 00:23:00then at 2019-12-05 02:23:00At minute 0 past hour 0 and 12 on day-of-month 1 in every 2nd month0 0,12 1 */2 *Would produce:next at 2020-01-01 00:00:00then at 2020-01-01 12:00:00then at 2020-03-01 00:00:00then at 2020-03-01 12:00:00then at 2020-05-01 00:00:00Non StandardsAt 00:00 on day-of-month 1 in January@yearlyor@annuallyWould produce:next at 2020-01-01 00:00:00then at 2021-01-01 00:00:00then at 2022-01-01 00:00:00then at 2023-01-01 00:00:00then at 2024-01-01 00:00:00At 00:00 on day-of-month 1@monthlyWould produce:next at 2020-01-01 00:00:00then at 2020-02-01 00:00:00then at 2020-03-01 00:00:00then at 2020-04-01 00:00:00then at 2020-05-01 00:00:00At 00:00 on Sunday@weeklyWould produce:next at 2019-12-08 00:00:00then at 2019-12-15 00:00:00then at 2019-12-22 00:00:00then at 2019-12-29 00:00:00then at 2020-01-05 00:00:00At 00:00@dailyWould produce:next at 2019-12-05 00:00:00then at 2019-12-06 00:00:00then at 2019-12-07 00:00:00then at 2019-12-08 00:00:00then at 2019-12-09 00:00:00At minute 0@hourlyWould produce:next at 2019-12-04 15:00:00then at 2019-12-04 16:00:00then at 2019-12-04 17:00:00then at 2019-12-04 18:00:00then at 2019-12-04 19:00:00At reboot@rebootReference crontab.org man7.org" }, { "title": "Logrotate", "url": "/posts/logrotate/", "categories": "Administration, Utilities", "tags": "utilities, linux, servers, administration", "date": "2021-12-22 01:00:00 -0600", "snippet": "Logrotate is a tool admins use to manage system logs on their Linux servers.Config files are kept in /etc/logrotate.d/, to add a new file you would want to do the following, changing config_file to a proper name:touch /etc/logrotate.d/config_filechmod 644 /etc/logrotate.d/config_filechown root.root /etc/logrotate.d/config_fileThen edit the file with your required settings.To ensure your config changes are free of errors, you can run this command:logrotate -f /etc/logrotate.d/config_file Some things you can do with logrotate are: rotate our logs daily, weekly, monthly rotate your logs based on file size compress log files after rotation remove old rotated logsLogrotate Configuration files /usr/sbin/logrotate – The logrotate command itself. /etc/cron.daily/logrotate – This shell script executes the logrotate command everyday. /etc/logrotate.conf – Log rotation configuration for all the log files are specified in this file. /etc/logrotate.d – When individual packages are installed on the system, they drop the log rotation configuration information in this directory." }, { "title": "macOS Setup", "url": "/posts/mac-setup/", "categories": "Hardware, macOS", "tags": "mac, laptop, build", "date": "2021-12-22 00:46:00 -0600", "snippet": "Everyone does this differently to suite their needs but this is what I do on my machine as a base. You may not need all the options below.Check for updatesClick Apple menu () → About This Mac → Software Update.System and preferences Click Apple menu () → System PreferencesDesktop &amp;amp; Screen SaverPick a screensaver then enable Hot Corners for bottom right to start screensaverDock Adjust size and Position as you find convenient. I make mine smaller and leave it at the bottom. check Minimize windows into application icon un-check Show recent applications in DockSecurity &amp;amp; PrivacyFirewall: Click the Firewall tab. Click the Lock button, then enter an administrator name and password. Click Turn On Firewall.Disk Encryption Click the FileVault tab. Click the Lock button, then enter an administrator name and password. Click Turn On FileVault. Follow the instructions.Trackpad Click the Point &amp;amp; click tab. Change Secondary click to Right corner Enable Tap to click with one finger Adjust Tracking speed as neededFinder Finder → Preferences Change New finder window show to open in your Home Directory Sidebar: Check Home Uncheck Recent Tags View Click Show Path Bar Click Show Status Bar Click Show View Options: Set Always open in column view Set Browse in column view Set Group by to Kind Set Sort by to Name MenubarClick on the battery icon in the menu bar and enable Show PercentageScreenshotsChange the default folder for screenshotsmkdir -p /path/to/screenshots/defaults write com.apple.screencapture location /path/to/screenshots/ &amp;amp;&amp;amp; killall SystemUIServerHomebrewThe first thing you want to do is install Homebrew/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;iTerm2iTerm2 is a replacement for terminal and the successor to iTerm.brew install iterm2Oh My ZshOh My Zsh is an open source, community-driven framework for managing your zsh configuration.sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;Change your shellchsh -s $(which zsh)Start a new shell instancesource ~/.zshrcUpgradingupgrade_oh_my_zshPowerlevel10kRead more about Powerlevel10kManual Installationgit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10kecho &#39;source ~/powerlevel10k/powerlevel10k.zsh-theme&#39; &amp;gt;&amp;gt;~/.zshrcOh My Zsh Installationgit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10kHomebrew Installationbrew install romkatv/powerlevel10k/powerlevel10kecho &#39;source /usr/local/opt/powerlevel10k/powerlevel10k.zsh-theme&#39; &amp;gt;&amp;gt;~/.zshrcUseful UtilitiesA list of some other utils I use or may want to check out in the future. For a listing of all casks available from the cask, click here to see the list.zsh PluginsAdditional plugins can be found at zsh-users and Oh My Zshgit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlightinggit clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completionsAdd the plugins to your .zshrc file like so:# zsh Pluginsplugins=( [...] zsh-autosuggestions zsh-completions zsh-syntax-highlighting)Coding FontsPick one of the following fonts to use, these include ligatures for powerlevel10k. I use Hack.brew install font-fira-code-nerd-fontbrew install font-fira-mono-nerd-fontbrew install font-hack-nerd-fontbrew install font-roboto-mono-nerd-fontbrew install font-ubuntu-mono-nerd-fonttreebrew install treevimbrew install vimhtopbrew install htopangry-ip-scanner Angry IP Scanner - Open-source, cross-platform network scannerbrew install angry-ip-scannerappcleaner AppCleaner - uninstall unwanted appsbrew install appcleaneratom Atom - Cross-platform text editor by Githubbrew install atombalenaetcher Etcher - Tool to flash OS images to SD cards &amp;amp; USB drivesbrew install balenaetchercodeexpander CodeExpande - Tool to store code snippets, similar to TextExpander.brew install codeexpandercode-notes Code Notes - Code snippet &amp;amp; gist managerbrew install code-notescolorpicker-materialdesign Material Design Color Picker - a custom color picker plugin for macOS that allows users to navigate color swatches and select colors from Google’s Material Design Color Palette.brew install colorpicker-materialdesignlastpass!!! note I’m currently looking for a replacement as Lastpass is going in a direction I don’t like. Will update once I find a good one. LastPass - Cross-platform password managerbrew install lastpassrectangle Rectangle - Move and resize windows using keyboard shortcuts or snap areasbrew install rectangleskitch Skitch - Screen capture tool with mark up and sharing featuresbrew install skitchslack Slack - Team communication and collaboration softwarebrew install slackteamviewer TeamViewer - Remote access and connectivity software focused on securitybrew install teamviewertor-browser Tor Browser - Web browser focusing on securitybrew install tor-browservisual-studio-code Microsoft Visual Studio Code - Microsoft’s Open-source code editorbrew install visual-studio-codeLinks to other stuffs Giphy - create your own gifs." }, { "title": "Salsa Roja", "url": "/posts/Salsa-Roja/", "categories": "Cooking, Food", "tags": "salsa, food, cooking", "date": "2021-12-21 23:33:00 -0600", "snippet": "Salsa Roja is delicious, goes well with pretty much anything and is super easy to make. Here is my recipe to help you out :).What you need Pot - size depends on the tomatoes and peppers you are using Blender or Food Processor Water - enough to cover the tomatoes and peppers in the pot 3 Roma tomatoes 1 Jalapeño or 3 Serrano Small bunch cilantro - about 20 stems Salt - preferably sea salt Lime - can substitute with lemonTip Cilantro is also known as Coriander in some countries. Your salsa will taste better, nah.. amazing if you grow your own tomatoes or purchase them from a local producer or at a farmers market.How to make Wash/Rinse your tomatoes, peppers and cilantro Boil the tomatoes and peppers. They are ready to be removed when the skin of the tomatoes crack. You can turn off the fire and leave them in a bit longer while you cut your onions. Peel and cut your onions into quarters and place them in the blender/food processor. Place the tomatoes and cilantro in your blender/food processor. Cut the stems off the peppers, also add them to the blender/food processor After blending, add lime juice and salt to taste. his step depends on how chunky or runny you want your salsa. I tend to pulse my blender to get it on the chunky side. Enjoy your fresh home made salsa.Notes Your pot should be large enough to hold the peppers and tomatoes; but not so large that it takes too long to boil them. If you like spicy, you can substitute Jalapeño for another spicier pepper. I enjoy a good burn so I use Ghost peppers; but a good place to be for most, is between Serrano and Habanero. If you don’t like spicy foods, you can substitute spicy peppers with green/red bell pepper. Salsas go good with tacos (carne asada is my favorite), scrambled eggs, chicken of beef soup or just plain scoop it on tortilla chips." } ]
